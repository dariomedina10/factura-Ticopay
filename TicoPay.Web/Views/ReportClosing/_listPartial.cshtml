@using TicoPay.Invoices
@model TicoPay.ReportClosing.Dto.ReportClosingInputDto<TicoPay.ReportClosing.Dto.ReportClosingDto>
@{
    ViewBag.Title = "Reporte de Cierres";
    //var conversion = false;
    //conversion = ViewBag.Conversion;
    var moneda = "";
    var monedaTenant = "";

}
<script>
    $(document).ready(function () {

        $('#TableListEntity').DataTable({

            drawCallback: function () {

                $('[data-toggle="popover"]').popover({
                    html: true,
                    container: 'body',
                    trigger: 'focus'
                });

            },
           
            columnDefs: [
                { type: "sorted", targets: 1 },
                { orderable: false, targets: 10 }
            ],
            order: [[1, "desc"]],
            dom: 'Bfrtip',
            paging: true,
            searching: true,
            "bAutoWidth": true,
            "scrollX": true,
            buttons: [{
                extend: 'copy',
                text: 'Copiar al portapapeles',
                footer: true
            },
                {
                    extend: 'excelHtml5',
                    footer: true,
                    exportoptions: {
                        columns: ':visible',
					},
                    customizeData: function (data) {
                        debugger;
                        //for (var i = 0; i < data.body.length; i++) {
                        //    data.body[i][3] = '\u200c' + data.body[i][3];
                        //}

                        for (i = 0; i < data.body.length; i++) {
                            //Tipo de pago
                            var PaymetnMethodType = data.body[i][10];
                            var PaymetnMethodTypeF = '';
                            pat = /Efectivo/
                            if (pat.test(PaymetnMethodType)) {
                                PaymetnMethodTypeF += 'Efectivo' + ' ';
                            };
                            pat = /Tarjeta/
                            if (pat.test(PaymetnMethodType)) {
                                PaymetnMethodTypeF += 'Tarjeta' + ' ';
                            };
                            pat = /Cheque/
                            if (pat.test(PaymetnMethodType)) {
                                PaymetnMethodTypeF+= 'Cheque' + ' ';
                            }; 
                            pat = /Depósito\/\Transferencia/
                            if (pat.test(PaymetnMethodType)) {
                                PaymetnMethodTypeF += 'Depósito/Transferencia' + ' ';
                            };

                            data.body[i][10] = PaymetnMethodTypeF;

                            
                        };
                    }
                },{
                    extend: 'pdfHtml5',
                    orientation: 'landscape',
                    pageSize: 'A4',
                    footer: true,
                    customize: function (doc) {
                    doc.pageMargins = [10, 10, 90, 10];
                    doc.styles.tableHeader.fontSize = 7;
                    doc.styles.tableFooter.fontSize = 7;
                    doc.defaultStyle.fontSize = 7;
                        var rowCount = doc.content[1].table.body.length;
                        doc.content[1].table.widths = ['10%', '10%', '7%', '8%', '8%' , '7%', '8%', '7%', '8%', '8%', '7%', '12%', '5%', '8%'];
                    for (i = 1; i < rowCount; i++) {
                        var name = doc.content[1].table.body[i][3].text;
                        var delimiter = name.split(" ");
                        var namef = '';
                        $.each(delimiter, function (index, value) {
                            if (value.length > 12) {
                                text = value.substring(0, 12) + '...';
                            }
                            else {
                                text = value;
                            }
                            namef += text + ' ';
                        });

                        doc.content[1].table.body[i][3].text = namef;

                        var nameUser = doc.content[1].table.body[i][4].text;
                        var delimiterUser = nameUser.split(" ");
                        var namefUser = '';
                        $.each(delimiterUser, function (index, value) {
                            if (value.length > 12) {
                                text = value.substring(0, 12) + '...';
                            }
                            else {
                                text = value;
                            }
                            namefUser += text + ' ';
                        });

                        doc.content[1].table.body[i][4].text = namefUser;

                        //Tipo Pago
                        var PaymetnMethodType = doc.content[1].table.body[i][10].text;
                        var PaymetnMethodTypeF = '';
                        pat = /Efectivo/
                        if (pat.test(PaymetnMethodType)) {
                            PaymetnMethodTypeF += 'Efectivo' + ' ';
                        };
                        pat = /Tarjeta/
                        if (pat.test(PaymetnMethodType)) {
                            PaymetnMethodTypeF += 'Tarjeta' + ' ';
                        };
                        pat = /Cheque/
                        if (pat.test(PaymetnMethodType)) {
                            PaymetnMethodTypeF += 'Cheque' + ' ';
                        };
                        pat = /Depósito\/\Transferencia/
                        if (pat.test(PaymetnMethodType)) {
                            PaymetnMethodTypeF += 'Depósito/Transferencia' + ' ';
                        };
                        doc.content[1].table.body[i][10].text = PaymetnMethodTypeF;

                        console.log(PaymetnMethodType);
                    };
                }
                }, { extend: 'csvHtml5', footer: true }, { extend: 'print', footer: true },],
            language: {
                "sProcessing": "Procesando...",
                "sLengthMenu": "Mostrar _MENU_ registros",
                "sZeroRecords": "No se encontraron resultados",
                "sEmptyTable": "Ningún dato disponible en esta tabla",
                "sInfo": "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
                "sInfoEmpty": "Mostrando registros del 0 al 0 de un total de 0 registros",
                "sInfoFiltered": "(filtrado de un total de _MAX_ registros)",
                "sInfoPostFix": "",
                "sSearch": "Buscar:",
                "sUrl": "",
                "sInfoThousands": ",",
                "sLoadingRecords": "Cargando...",
                "oPaginate": {
                    "sFirst": "Primero",
                    "sLast": "Último",
                    "sNext": "Siguiente",
                    "sPrevious": "Anterior"
                },
                "oAria": {
                    "sSortAscending": ": Activar para ordenar la columna de manera ascendente",
                    "sSortDescending": ": Activar para ordenar la columna de manera descendente"
                },
                buttons: {
                    copyTitle: 'Copiar al portapapeles',
                    copySuccess: {
                        _: 'Copiado %d filas al portapapeles',
                        1: 'Copiado una fila al portapapeles'
                    }
                }
            }
        });

        $('[data-toggle="popover"]').popover({ html: true });
    });
</script>

<style>
    /*.table {
        min-width: 1100px;
    }*/
    .popover-content {
        background-color: #37743d !important;
        border-color: #37743d !important;
    }

    .popover {
        border-color: #37743d !important;
        background-color: #37743d !important;
    }
    .popover.bottom > .arrow:after {
        border-bottom-color: #37743d !important;
    }

    .ClientName {
        white-space: nowrap;
        min-width: 130px;
        max-width: 140px;
        overflow: hidden;
        text-overflow: ellipsis;
        text-align: center;
        margin: 0 auto;
    }

</style>
@if (Model != null && Model.InvoicesList != null && Model.InvoicesList.Any())
{
    string currencyFmt = "{0:0.00}"; 

    <div class="wrapper-content white-bg text-center">
        <table id="TableListEntity" class="table table-responsive" data-export-footer="true" style="font-size: small">
            <thead class="text-center">
                <tr>
                    <th style="text-align: center; min-width:80px;">
                        Tipo Documento
                    </th>
                    <th style="text-align: center;">
                        Nro. Documento
                    </th>
                    <th style="text-align: center; min-width:70px;">
                        Fecha
                    </th>
                    <th style="text-align: center; min-width:130px;">
                        Cliente
                    </th>
                    <th style="text-align: center;">
                        Usuario Creador
                    </th>
                    <th style="text-align: center;">
                        Estado
                    </th>
                    <th style="text-align: center;">
                        Moneda
                    </th>
                    <th style="text-align: center;">
                        Monto
                    </th>
                    <th style="text-align: center;">
                        Débitos
                    </th>
                    <th style="text-align: center;">
                        Créditos
                    </th>
                    <th style="text-align: center; min-width:60px">
                        Forma de Pago
                    </th>
                    <th style="text-align: center; min-width:70px">
                        Total
                    </th>
                    <th style="text-align: center;">
                        Tasa
                    </th>
                    <th style="text-align: center;">
                        Total Conversión
                    </th>
                </tr>
            </thead>
            <tbody>
                @{
                    string content = "";
                    string title = "";
                    string color = " ";

                    //calculos Y
                    decimal totalCash = 0;
                    decimal totalCard = 0;
                    decimal totalCheck = 0;
                    decimal totalDeposit = 0;
                    decimal tasa = 0;
                    decimal total = 0;

                }
                @foreach (var item in Model.InvoicesList)
                {
                    moneda = @item.CodigoMonedaFiltro.ToString();
                    monedaTenant = item.CodigoMonedaTenant.ToString();
                     total = @item.Total + @item.Notes.Where(a => a.NoteType == NoteType.Debito).Sum(a => a.Total) - @item.Notes.Where(a => a.NoteType == NoteType.Credito).Sum(a => a.Total);
                  ////////////////////////
                <tr>
                    @*<td style="text-align: left; width:20px;">
            @item.Number
        </td>*@
                    <td style="text-align: left;">
                        @TicoPay.Application.Helpers.EnumHelper.GetDescription(item.TypeDocument)
                    </td>
                    <td style="text-align: left;">
                        @item.ConsecutiveNumber
                    </td>
                    <td style="text-align: center;">
                        @*if (item.InvoicePaymentTypes != null && item.InvoicePaymentTypes.FirstOrDefault().CreationTime != null)*@
                        @if (item.DueDate != null)
                        {
                            //@item.InvoicePaymentTypes.FirstOrDefault().CreationTime.ToString("dd/MM/yyyy")
                            @item.DueDate.ToString("dd/MM/yyyy");
                        }
                        else
                        {
                            <p>N/D</p>
                        }
                    </td>
                    <td style="text-align: center;" title="@item.ClientName">
                        <div class="ClientName" style="min-width:133px">@item.ClientName @item.LastName</div>
                    </td>
                    <td style="text-align: center;">
                        <div class="ClientName" style="min-width:133px">@item.UserName</div>
                    </td>
                    <td style="text-align: center;">
                        @if (@item.Status == Status.Parked)
                        {
                            <span class="label label-success">Pendiente</span>
                        }
                        else if (@item.Status == Status.Completed)
                        {
                            <span class="label label-primary">Pagada</span>
                        }
                        else if (@item.Status == Status.Voided)
                        {
                            <span class="label label-danger">Anulada</span>
                        }
                        else if (@item.Status == Status.Returned)
                        {
                            <span class="label label-warning">Reversada</span>
                        }
                    </td>
                    <td style="text-align: center;">
                        @item.CodigoMoneda
                    </td>
                    <td style="text-align: center;">
                        @Html.FormatValue(@item.Total, currencyFmt)
                    </td>
                    <td style="text-align: center;">
                        @if (item.Notes != null)
                        {
                            @Html.FormatValue(@item.Notes.Where(a => a.InvoiceId == item.InvoiceId && a.NoteType == NoteType.Debito).Sum(a => a.Total), currencyFmt)
                        }
                        else
                        {
                            <p>0.00</p>
                        }
                    </td>
                    <td style="text-align: center;">
                        @if (item.Notes != null)
                        {

                            @Html.FormatValue(@item.Notes.Where(a => a.InvoiceId == item.InvoiceId && a.NoteType == NoteType.Credito).Sum(a => a.Total), currencyFmt)

                        }
                        else
                        {
                            <p>0.00</p>
                        }
                    </td>
                    <td style="text-align: center;">

                        @* a partir de aqui esta la mejora  *@
                        @if (item.PaymentInvoices.FirstOrDefault() != null && item.Status != Status.Returned)
                        {
                            moneda = item.CodigoMoneda.ToString();
                            tasa = item.TasaConversion;


                            foreach (var payment in item.PaymentInvoices)
                            {
                                //conversiones
                                //SI LA MONEDA DEL TENANT ES CRC
                                if (monedaTenant == "CRC" && item.ShowConversion == true)
                                {
                                    if (moneda == "CRC")
                                    {
                                        if (TicoPay.Application.Helpers.EnumHelper.GetDescription(payment.PaymetnMethodType) == "Efectivo")
                                        {
                                            totalCash += payment.Amount;
                                        }
                                        if (TicoPay.Application.Helpers.EnumHelper.GetDescription(payment.PaymetnMethodType) == "Tarjeta")
                                        {
                                            totalCard += payment.Amount;
                                        }
                                        if (TicoPay.Application.Helpers.EnumHelper.GetDescription(payment.PaymetnMethodType) == "Cheque")
                                        {
                                            totalCheck += payment.Amount;
                                        }
                                        if (TicoPay.Application.Helpers.EnumHelper.GetDescription(payment.PaymetnMethodType) == "Depósito/Transferencia")
                                        {
                                            totalDeposit += payment.Amount;
                                        }
                                    }
                                    if (moneda == "USD")
                                    {

                                        if (TicoPay.Application.Helpers.EnumHelper.GetDescription(payment.PaymetnMethodType) == "Efectivo")
                                        {
                                            totalCash += payment.Amount * tasa;
                                        }
                                        if (TicoPay.Application.Helpers.EnumHelper.GetDescription(payment.PaymetnMethodType) == "Tarjeta")
                                        {
                                            totalCard += payment.Amount * tasa;
                                        }
                                        if (TicoPay.Application.Helpers.EnumHelper.GetDescription(payment.PaymetnMethodType) == "Cheque")
                                        {
                                            totalCheck += payment.Amount * tasa;
                                        }
                                        if (TicoPay.Application.Helpers.EnumHelper.GetDescription(payment.PaymetnMethodType) == "Depósito/Transferencia")
                                        {
                                            totalDeposit += payment.Amount * tasa;
                                        }
                                    }
                                }
                                //SI LA MONEDA DEL TENANT ES USD
                                if (monedaTenant == "USD" && item.ShowConversion == true)
                                {
                                    if (moneda == "CRC")
                                    {
                                        if (TicoPay.Application.Helpers.EnumHelper.GetDescription(payment.PaymetnMethodType) == "Efectivo")
                                        {
                                            totalCash += payment.Amount / tasa;
                                        }
                                        if (TicoPay.Application.Helpers.EnumHelper.GetDescription(payment.PaymetnMethodType) == "Tarjeta")
                                        {
                                            totalCard += payment.Amount / tasa;
                                        }
                                        if (TicoPay.Application.Helpers.EnumHelper.GetDescription(payment.PaymetnMethodType) == "Cheque")
                                        {
                                            totalCheck += payment.Amount / tasa;
                                        }
                                        if (TicoPay.Application.Helpers.EnumHelper.GetDescription(payment.PaymetnMethodType) == "Depósito/Transferencia")
                                        {
                                            totalDeposit += payment.Amount / tasa;
                                        }
                                    }
                                    if (moneda == "USD")
                                    {

                                        if (TicoPay.Application.Helpers.EnumHelper.GetDescription(payment.PaymetnMethodType) == "Efectivo")
                                        {
                                            totalCash += payment.Amount;
                                        }
                                        if (TicoPay.Application.Helpers.EnumHelper.GetDescription(payment.PaymetnMethodType) == "Tarjeta")
                                        {
                                            totalCard += payment.Amount;
                                        }
                                        if (TicoPay.Application.Helpers.EnumHelper.GetDescription(payment.PaymetnMethodType) == "Cheque")
                                        {
                                            totalCheck += payment.Amount;
                                        }
                                        if (TicoPay.Application.Helpers.EnumHelper.GetDescription(payment.PaymetnMethodType) == "Depósito/Transferencia")
                                        {
                                            totalDeposit += payment.Amount;
                                        }
                                    }
                                }
                                //SI NO HAY CONVERSION
                                if (item.ShowConversion == false)
                                {
                                    if (TicoPay.Application.Helpers.EnumHelper.GetDescription(payment.PaymetnMethodType) == "Efectivo")
                                    {
                                        totalCash += payment.Amount;
                                    }
                                    if (TicoPay.Application.Helpers.EnumHelper.GetDescription(payment.PaymetnMethodType) == "Tarjeta")
                                    {
                                        totalCard += payment.Amount;
                                    }
                                    if (TicoPay.Application.Helpers.EnumHelper.GetDescription(payment.PaymetnMethodType) == "Cheque")
                                    {
                                        totalCheck += payment.Amount;
                                    }
                                    if (TicoPay.Application.Helpers.EnumHelper.GetDescription(payment.PaymetnMethodType) == "Depósito/Transferencia")
                                    {
                                        totalDeposit += payment.Amount;
                                    }
                                }

                            }

                            if (item.PaymentInvoices.Count() > 1)
                            {
                                foreach (var payment in item.PaymentInvoices)
                                {
                                    title = TicoPay.Application.Helpers.EnumHelper.GetDescription(payment.PaymetnMethodType);
                                    content += "<div>" + TicoPay.Application.Helpers.EnumHelper.GetDescription(payment.PaymetnMethodType) + "&nbsp;" + Html.FormatValue(payment.Amount, currencyFmt) + "</br></div>";
                                }
                                if (title == "Efectivo")
                                {
                                    color = "label label-primary";
                                }
                                if (title == "Tarjeta")
                                {
                                    color = "label label-warning";
                                }
                                if (title == "Cheque")
                                {
                                    color = "label label-success";
                                }
                                if (title == "Depósito")
                                {
                                    color = "label label-info";
                                }
                                if (title == "Depósito/Transferencia")
                                {
                                    color = "label label-info";
                                }

                                <span class="@color">
                                    @title
                                    <a style="color: #ffffff;" href="#" onclick="return false;" data-toggle="popover" data-placement="bottom" data-content=@content><span class="glyphicon glyphicon-plus"></span></a>
                                </span>
                                content = "";
                            }
                            else
                            {
                                if (item.PaymentInvoices.FirstOrDefault() != null && item.PaymentInvoices.FirstOrDefault().PaymetnMethodType == PaymetnMethodType.Cash)
                                {
                                    <span class="label label-primary">Efectivo</span>
                                }
                                if (item.PaymentInvoices.FirstOrDefault() != null && item.PaymentInvoices.FirstOrDefault().PaymetnMethodType == PaymetnMethodType.Card)
                                {
                                    <span class="label label-warning">Tarjeta</span>
                                }
                                if (item.PaymentInvoices.FirstOrDefault() != null && item.PaymentInvoices.FirstOrDefault().PaymetnMethodType == PaymetnMethodType.Check)
                                {
                                    <span class="label label-success">Cheque</span>
                                }
                                if (item.PaymentInvoices.FirstOrDefault() != null && item.PaymentInvoices.FirstOrDefault().PaymetnMethodType == PaymetnMethodType.Deposit)
                                {
                                    <span class="label label-info">Depósito/Transferencia</span>
                                }
                            }

                        }

                        @* finaliza aqui la mejora *@


                    </td>
                    <td style="text-align: center;">
                        <div style="min-width:70px">
                            @if (item.Status != Status.Returned)
                            {
                                @Html.FormatValue(@total, currencyFmt)
                            }
                            else
                            { 
                                @Html.FormatValue(0, currencyFmt) 
                            }
                        </div>
                    </td>

                    <td style="text-align:center;">
                        @if (item.CodigoMonedaTenant.ToString() != moneda && item.ShowConversion == true)
                        {
                            @Html.FormatValue(@item.TasaConversion, currencyFmt)
                        }
                        else
                        {
                            <p>N/D</p>
                        }
                    </td>
                    <td style="text-align: center;">

                        @if (monedaTenant != moneda && item.ShowConversion == true)
                        {
                            if (monedaTenant == "CRC" && moneda == "USD")
                            {
                                @Html.FormatValue(@total * tasa, currencyFmt)
                            }
                            if (monedaTenant == "USD" && moneda == "CRC")
                            {
                                @Html.FormatValue(@total / @item.TasaConversion, currencyFmt)
                            }

                        }
                        else
                        {
                            <p>N/D</p>
                        }
                    </td>
                </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <td style="text-align: center; border: 0"></td>
                    <td style="text-align: center; border: 0"></td>
                    <td style="text-align: center; border: 0"></td>
                    <td style="text-align: center; border: 0"><h4><span>Total Efectivo:</span></h4></td>
                    <td style="text-align: center; border: 0">
                        <h4><span>@monedaTenant @Html.FormatValue(@totalCash, currencyFmt)</span></h4>
                    </td>
                    <td style="text-align: center; border: 0"><h4><span>Total Tarjetas:</span></h4></td>
                    <td style="text-align: center; border: 0; min-width:100px;">
                        <h4><span>@monedaTenant @Html.FormatValue(@totalCard, currencyFmt)</span></h4>
                    </td>
                    <td style="text-align: center; border: 0"><h4><span>Total Cheques:</span></h4></td>
                    <td style="text-align: center; border: 0">
                        <h4><span>@monedaTenant @Html.FormatValue(@totalCheck, currencyFmt)</span></h4>
                    </td>
                    <td style="text-align: center; border: 0"><h4><span>Total Deposito:</span></h4></td>
                    <td style="text-align: center; border: 0">
                        <h4><span>@monedaTenant @Html.FormatValue(@totalDeposit, currencyFmt)</span></h4>
                    </td>
                    <td style="text-align: center; border: 0"></td>
                </tr>
            </tfoot>
        </table>
    </div>

}
else
{
    <div class="alert alert-warning alert-dismissible" role="alert" style="text-align: center;">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <strong>¡No se han encontrado ninguna Factura</strong>
    </div>

}